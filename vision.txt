1. UX
    a. colors
        i. header/footer
        ii. side bar
        iii. ranges within a datatype
    b. progress bar
    c. Give minimum date warnings
    d. Shorter timeout?
    e. Ultimately, querying won't get faster unless it's parallel or pre-retrieved. Can I get multiple tokens?
    f. Find closest location to desired location
    g. Family History relevance, significant dates
2. Functionality
    a. Toggle line graph vs. histogram
        i. show dates for max and min values
        ii. make hover easier for small bars
    b. Is there another source of data before 1982?
    c. Figure out other datatypes
    d. Retain a memory of previous searches on a single session
        i. And enable comparison between two places
    e. input security
    f. React
    g. Update code with MVC model
3. What's already out there
    a. wunderground
    b. weather.gov/wrh/climate
    c. extremeweatherwatch.com
    d. weatherspark.com
4. Top five priorities
    a. DONE Pre-1982
    b. Search result memory and comparison (side bar?)
        0. I'm overcomplicating this! We might not even want to aggregate. Let's start with a non-aggregation approach.
        i. DONE Make a side bar. Show start/end dates.
        ii. Check the stored data. If start and end date match, display previous search.
            - With complete representation, grab segment from previous data
            - With partial overlap, record change in start or end date and query
            - With containment:
                - If contained period is >= 1 year, record
                - If contained period is < 1 year, ignore
            - Range storage should check overlap
        iii. Check date overlap
            - Grab overlap
            - Query for the rest.
        iv. One nice thing is the python dictionary update() method,
            which checks for preexisting keys and changes their value.
    c. Quicker queries and/or progress bar
    d. Better header
    e. Warning toast